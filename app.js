//Dependencies
var express = require('express'); // The main framework
var path = require('path'); // Used to merge paths efficiently 
var bodyParser = require('body-parser'); //used to parse body of the request
var logger = require('morgan'); // used to log request url type and response code in the terminal
var cookieParser = require('cookie-parser')
var fs = require('fs')
var app = express();

var fileUpload = require('express-fileupload');
//require controller
var initDb = require('./config/mongoInit.js').initDb ;
initDb() ;

superSecret = require('./config/config').key ;

//require routes
var loginHandler = require('./routes/loginHandler.js')
var signUpHandler = require('./routes/signUpHandler.js')
var add_data = require('./routes/add_data.js')
var get_data = require('./routes/get_data.js')

//require middlewares

var authenticate = require('./middlewares/authenticate')


app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');
app.use(fileUpload());

app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser())

// Static files provider for public directory
app.use(express.static(path.join(__dirname, 'public')))
/*
app.use(function(req, res, next){
  User.findOne({'name':'hutiya'}, function(err, user){
    console.log(user)
    console.log(err)
    res.end('Chutiya', user)
  })
})
*/

//Routes
app.get('/:id', function(req, res, next){
  User.findOne({_id: req.params.id}, function(err, user){
    if(err){
      next();
    }else{
      if(user){
        res.render('profile',{user : user})
      }else{
        next()
      }
    }
  })
})
app.use('/login',loginHandler)
app.use('/signup',signUpHandler)
app.use(authenticate)
app.get('/', function(req, res, next){
  console.log('Inside the application')
  res.end('chutiya')
})
app.use('/add_data', add_data)
app.use('/get_data', get_data)
app.get('/dashboard', function(req, res, next){
  res.render('dashboard',{message:''})
})
// this error handler was generated by express-generator and for development environment only
app.get('/serve_image/:name', function(req, res, next){
  console.log('Chutiya')
  var image =  fs.readFileSync(__dirname+'/images/'+req.params.name)
  console.log(image)
  res.writeHead(200, {'Content-Type': 'image/'+ req.params.name.split('.')[1] });
     res.end(image, 'binary');
	console.log(req.params.name, 'wtf')
})
/*
//templates

app.use('/', function(req, res, next){})
app.use('/', )

*/
app.use(function(err, req, res, next) {
	console.log(err)
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.end('error');
});

app.use(function(req,res){
  res.render('error', {message:''})
})
app.listen(3000)