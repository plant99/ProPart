//Dependencies
var express = require('express'); // The main framework
var path = require('path'); // Used to merge paths efficiently
var bodyParser = require('body-parser'); //used to parse body of the request
var logger = require('morgan'); // used to log request url type and response code in the terminal
var cookieParser = require('cookie-parser')
var fs = require('fs')
var app = express();
var jwt = require('jsonwebtoken') ;
var fileUpload = require('express-fileupload');
//require controller
var initDb = require('./config/mongoInit.js').initDb ;
initDb() ;

superSecret = require('./config/config').key ;

//require routes
var loginHandler = require('./routes/loginHandler.js')
var signUpHandler = require('./routes/signUpHandler.js')
var add_data = require('./routes/add_data.js')
var get_data = require('./routes/get_data.js')
var chat_server = require('./routes/chat_server')

var http = require('http').Server(app);
var io = require('socket.io')(http) ;
//require middlewares

var authenticate = require('./middlewares/authenticate')


app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');
app.use(fileUpload());

app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser())

// Static files provider for public directory
app.use(express.static(path.join(__dirname, 'public')))
/*
app.use(function(req, res, next){
  User.findOne({'name':'hutiya'}, function(err, user){
    console.log(user)
    console.log(err)
    res.end('Chutiya', user)
  })
})
*/
app.post('/decode_token',function(req, res, next){
  jwt.verify(req.body.token, superSecret, function(err, decoded){
    if(err){
      res.json({success:false})
    }else{
      res.json({success:true, decoded: decoded._doc})
    }
  })
})
//Routes
app.use('/login',loginHandler)
app.use('/signup',signUpHandler)
app.use(authenticate)

app.get('/:id', function(req, res, next){
  User.findOne({_id: req.params.id}, function(err, user){
    if(err){
      next();
    }else{
      if(user){
        res.render('profile',{user : user, logged_user: req.decoded._doc})
      }else{
        next()
      }
    }
  })
})
app.get('/:username', function(req, res, next){
  User.findOne({username: req.params.username}, function(err, user){
    if(err){
      next();
    }else{
      if(user){
        res.render('profile',{user : user, logged_user: req.decoded._doc})
      }else{
        next()
      }
    }
  })
})

app.get('/', function(req, res, next){
  res.end('chutiya')
})
app.use('/add_data', add_data)
app.use('/get_data', get_data)
app.get('/dashboard', function(req, res, next){
  User.findOne({_id: req.decoded._doc._id}, function(err, user){
    if(err){
      res.render('error',{ message:'We couldn\'t id you.'})
    }else{
      res.render('dashboard',{message:'', user: user})
    }
  })
})
// this error handler was generated by express-generator and for development environment only
app.get('/serve_image/:name', function(req, res, next){
  var image =  fs.readFileSync(__dirname+'/images/'+req.params.name)
  res.writeHead(200, {'Content-Type': 'image/'+ req.params.name.split('.')[1] });
     res.end(image, 'binary');
})

app.use('/chat',chat_server) ;
/*
//templates

app.use('/', function(req, res, next){})
app.use('/', )

*/
app.use(function(err, req, res, next) {
	console.log(err)
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.end('error');
});

app.use(function(req,res){
  res.render('error', {message:''})
})

//io function handlers
io.on('connection', function(socket){
  //handler user during connections
  var cookiesParsed = socket.handshake.headers.cookie.replace('; ','=').replace('; ','=').split('=') ;
  var indexOfUsername = cookiesParsed.indexOf('username') ;
  var username = cookiesParsed[indexOfUsername+1] ;
  Online.findOne({username:username}, function(err, user){
    if(err) console.log(err) ;
    if(user){
      user.socket_ids.push(socket.id) ;
      user.save(function(err, onlineSaved){
        if(err) console.log(err) ;
      })
    }else{
      var online = new Online({
        username: username,
        socket_ids:[socket.id]
      })
      online.save(function(err, onlineSaved){
        if(err) console.log(err) ;
      })
    }
  })
  //handle disconnections
  socket.on('disconnect', function(){
    console.log(username)
    Online.findOne({username: username}, function(err, user){
      if(user && user.socket_ids.length){
        if(user.socket_ids.indexOf(socket.id) != (-1)){
          user.socket_ids.splice(user.socket_ids.indexOf(socket.id),1) ;
          user.save(function(err){
            if(err) console.log(err) ;
          })
        }
      }
    })
  })

  //private message saving

  socket.on('private message',function(data){
    var message = data.message ;
    var source = data.source ;
    var target = data.target ;
    Chat.findOne({participants:[source,target]}, function(err, chat_0){
      if(err){
        console.log(err) ;
      }else{
        if(chat_0){
          //insert message
          chat_0.messages.push({
            author: source,
            message: message,
            time: new Date()
          })
          chat_0.save(function(err, chat){
            if(err) console.log(err);
          })
        }else{
          Chat.findOne({participants:[target, source]}, function(err, chat_1){
              if(err){
                console.log(err)
              }else{
                if(chat_1){
                  //insert message
                  chat_1.messages.push({
                    author: source,
                    message: message,
                    time: new Date()
                  })
                  chat_1.save(function(err, chat){
                    if(err) console.log(err);
                  })
                }
              }
          })
        }
      }
    })


    //Live sending of messages

    Online.findOne({username:target}, function(err, user){
      if(err) console.log(err) ;
      if(user){
        console.log(user)
        if(user.socket_ids.length){
          for(var i=0;i<user.socket_ids.length;i++){
            console.log(user.socket_ids[i],'is socket id')
            socket.to(user.socket_ids[i]).emit('private message from_server', data);
          }
        }
      }
    })

  })

})


http.listen(3000) ;

function findIndexOf(username, array){
  for(var i=0;i< array.length ;i++){
    if( username === array[i].username){
      return i ;
    }
  }
  return -1 ;
}

/*

Saving Chat

Chat.findOne({participants:[p1,p2]}, function(err, chat_0){
  if(chat_0){
    //insert message
    chat_0.messages.push({
      author: p1,
      message: message_text,
      time: new Date()
    })
    chat_0.save(function(err, chat){
      if(err) console.log(err);
    })
  }else{
    Chat.findOne({participants:[p2,p1]}, function(err, chat_1){
        if(err){
          console.log(err)
        }else{
          if(chat_1){
            //insert message
            chat_1.messages.push({
              author: host,
              message: message_text,
              time: new Date()
            })
            chat_1.save(function(err, chat){
              if(err) return;
            })
          }
        }
    })
  }
})

*/
